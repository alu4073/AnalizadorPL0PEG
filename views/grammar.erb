<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
      <i>símbolos no terminales</i>,
      <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.
  Un elemento de $P$ se denomina <i>regla de análisis</i>. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina <i>expresión de arranque</i>.
</ol>
<ol>
  <li> $\Sigma = \{ =, +, -, *, /, (, ), 0 \ldots 9 \}$, 
  <li> $V = \{ program, block, constants, identificators, arguments, process, st, cond, exp, term, factor \} \cup$ <br />
  $\{ASSIGN, ADD, MUL, LEFTPAR, RIGHTPAR, COLON, SEMICOLON, DOT, COMMA, COMPARISON \} \cup$ <br />
  $\{ID, NUMBER, IF, THEN, ELSE, PROCEDURE, BEGIN, END, WHILE, DO, CALL, P, ODD, CONST, VAR, \_ \}$
  <li> Reglas de análisis:
  <ol>
<pre>

      program        = (block)+ DOT 

      block          = CONST (constants)+ SEMICOLON 
                     / VAR (identificators)+ SEMICOLON 
                     / (process)* st 

      constants      = COMMA ID ASSIGN NUMBER 
                     / ID ASSIGN NUMBER 
               
      identificators = COMMA ID 
                     / ID 

      arguments      = COMMA VAR ID 
                     / VAR ID 
               
      process        = PROCEDURE ID LEFTPAR (arguments)+ RIGHTPAR COLON (block)+ END SEMICOLON 
                     / PROCEDURE ID COLON (block)+ END SEMICOLON  
            
      st             = ID ASSIGN exp SEMICOLON      
                     / ID ASSIGN exp    
                     / IF cond THEN st ELSE st  
                     / IF THEN st  
                     / CALL ID LEFTPAR (identificators)+ RIGHTPAR SEMICOLON 
                     / CALL ID SEMICOLON 
                     / P exp  
                     / WHILE cond DO st  
                     / BEGIN (st)+ END SEMICOLON 

      cond           = ODD exp  
                     / exp COMPARISON exp  

      exp            = term (ADD term)*   

      term           = factor (MUL factor)* 

      factor         = NUMBER
                     / ID
                     / LEFTPAR exp RIGHTPAR   



      _ = $[ \t\n\r]*

      ASSIGN     = _ op:'=' _  
      ADD        = _ op:[+-] _ 
      MUL        = _ op:[*/] _ 
      COMPARISON = _ op:[<>=!][=] _ 
                 / _ op:[<>] _ 
      ID         = _ id:$([a-zA-Z_][a-zA-Z_0-9]*) _         
      NUMBER     = _ digits:$[0-9]+ _ 
          
  
      DOT        = _ "." _
      SEMICOLON  = _ ";" _
      COLON      = _ ":" _
      COMMA      = _ "," _
      LEFTPAR    = _"("_
      RIGHTPAR   = _")"_
      IF         = _ "if" _   
      THEN       = _ "then" _
      ELSE       = _ "else" _
      CALL       = _ "call" _
      P          = _ "p" _
      ODD        = _ "odd" _
      WHILE      = _ "while" _
      DO         = _ "do" _
      BEGIN      = _ "begin" _
      END        = _ "end" _
      CONST      = _ "const" _
      VAR        = _ "var" _
      PROCEDURE  = _ "procedure" _

</pre>
  </ol>
  <li> Expresión de arranque: $program$
</ol>
<BR>
<BR>
<BR>

